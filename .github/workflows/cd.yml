name: CD - Deploy to AWS

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-2
  NODE_VERSION: '18.x'

jobs:
  determine-environment:
    name: Determine Deployment Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: determine-environment
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install AWS CDK
        run: npm install -g aws-cdk
        
      - name: Install infrastructure dependencies
        run: |
          cd infrastructure
          npm ci --legacy-peer-deps
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy CDK stack
        run: |
          cd infrastructure
          npm run deploy:${{ needs.determine-environment.outputs.environment }} -- --require-approval never
        env:
          ENVIRONMENT: ${{ needs.determine-environment.outputs.environment }}

  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure]
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Serverless Framework
        run: npm install -g serverless
        
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci --legacy-peer-deps --production
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy Serverless backend
        run: |
          cd backend
          serverless deploy --stage ${{ needs.determine-environment.outputs.environment }}
        env:
          STAGE: ${{ needs.determine-environment.outputs.environment }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

  deploy-ai-models:
    name: Deploy AI Models
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-infrastructure]
    environment: ${{ needs.determine-environment.outputs.environment }}
    if: needs.determine-environment.outputs.environment != 'dev'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Deploy to SageMaker
        run: |
          cd ai-models
          echo "Deploying AI models to SageMaker..."
          # Deployment script would go here
        continue-on-error: true

  run-smoke-tests:
    name: Run Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-backend, determine-environment]
    environment: ${{ needs.determine-environment.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install test dependencies
        run: |
          cd backend
          npm ci --legacy-peer-deps
          
      - name: Run smoke tests
        run: |
          cd backend
          npm run test:smoke -- --env=${{ needs.determine-environment.outputs.environment }}
        env:
          API_ENDPOINT: ${{ secrets.API_ENDPOINT }}
        continue-on-error: true
          
      - name: Health check validation
        run: |
          HEALTH_ENDPOINT="${{ secrets.API_ENDPOINT }}/health"
          echo "Checking health endpoint: $HEALTH_ENDPOINT"
          
          for i in {1..5}; do
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_ENDPOINT" || echo "000")
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Health check passed!"
              exit 0
            fi
            echo "Attempt $i failed with HTTP code: $HTTP_CODE"
            sleep 10
          done
          
          echo "‚ùå Health check failed after 5 attempts"
          exit 1

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [determine-environment, deploy-backend, run-smoke-tests]
    if: always()
    
    steps:
      - name: Send deployment notification
        run: |
          if [ "${{ needs.run-smoke-tests.result }}" == "success" ]; then
            echo "‚úÖ Deployment to ${{ needs.determine-environment.outputs.environment }} completed successfully!"
          else
            echo "‚ùå Deployment to ${{ needs.determine-environment.outputs.environment }} failed!"
          fi

  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    needs: determine-environment
    if: needs.determine-environment.outputs.environment == 'prod'
    environment:
      name: production-approval
      
    steps:
      - name: Request approval
        run: |
          echo "üö® Production deployment requested!"
          echo "Please review the changes and approve the deployment."

  invalidate-cdn:
    name: Invalidate CloudFront Cache
    runs-on: ubuntu-latest
    needs: [deploy-backend, determine-environment]
    if: needs.determine-environment.outputs.environment == 'prod' || needs.determine-environment.outputs.environment == 'staging'
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Invalidate CloudFront
        run: |
          DISTRIBUTION_ID="${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
          if [ -n "$DISTRIBUTION_ID" ]; then
            aws cloudfront create-invalidation \
              --distribution-id "$DISTRIBUTION_ID" \
              --paths "/*"
            echo "‚úÖ CloudFront cache invalidated"
          else
            echo "‚ö†Ô∏è No CloudFront distribution ID found"
          fi