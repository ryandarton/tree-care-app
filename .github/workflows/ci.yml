name: CI - Test and Validate

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  AWS_REGION: us-east-2

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Check TypeScript
        run: npm run type-check || echo "Type check script not found"

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          cd backend && npm ci --legacy-peer-deps
          
      - name: Run backend tests
        run: npm run test:backend
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          
      - name: Generate coverage report
        run: |
          cd backend
          npm run test -- --coverage --coverageReporters=text-lcov > coverage.lcov
        continue-on-error: true
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.lcov
          flags: backend
          name: backend-coverage

  test-mobile:
    name: Test Mobile
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci --legacy-peer-deps
          cd mobile && npm ci --legacy-peer-deps
          
      - name: Run mobile tests
        run: npm run test:mobile
        
      - name: Generate coverage report
        run: |
          cd mobile
          npm run test -- --coverage --coverageReporters=text-lcov > coverage.lcov
        continue-on-error: true
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage.lcov
          flags: mobile
          name: mobile-coverage

  test-infrastructure:
    name: Test Infrastructure
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install AWS CDK
        run: npm install -g aws-cdk
        
      - name: Install infrastructure dependencies
        run: |
          cd infrastructure
          npm ci --legacy-peer-deps
          
      - name: Run CDK synth
        run: |
          cd infrastructure
          npm run synth
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          
      - name: Run infrastructure tests
        run: |
          cd infrastructure
          npm test
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: |
          npm audit --production --audit-level=high || echo "Found vulnerabilities"
          cd backend && npm audit --production --audit-level=high || echo "Found backend vulnerabilities"
          cd ../mobile && npm audit --production --audit-level=high || echo "Found mobile vulnerabilities"
        continue-on-error: true
        
      - name: Run Trivy security scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-validation:
    name: Validate Build
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-mobile]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Build backend
        run: |
          cd backend
          npm ci --legacy-peer-deps
          npm run build || echo "Build script not found"
          
      - name: Build mobile (Expo prebuild)
        run: |
          cd mobile
          npm ci --legacy-peer-deps
          npx expo prebuild --no-install --platform ios
          npx expo prebuild --no-install --platform android
        continue-on-error: true

  matrix-test:
    name: Matrix Test Node ${{ matrix.node-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        node-version: ['18.x', '20.x']
        exclude:
          - os: macos-latest
            node-version: '20.x'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install and test
        run: |
          npm ci --legacy-peer-deps
          npm test
        continue-on-error: true

  all-checks-passed:
    name: All CI Checks Passed
    runs-on: ubuntu-latest
    needs: [lint, test-backend, test-mobile, security-scan, build-validation]
    
    steps:
      - name: CI Success
        run: |
          echo "âœ… All CI checks passed successfully!"
          echo "Ready for deployment or merge"